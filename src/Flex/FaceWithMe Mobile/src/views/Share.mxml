<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
        xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:mc="components.*" 

		title="Podziel się"
		width="100%"
		height="100%"
		styleName="bgBlack"

		creationComplete="initViewHandler(event);"
		resize="resizeViewHandler(event);"
		>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
        <![CDATA[
			import data.BroadcastData;
			import components.CameraDisplay;

			import flash.net.GroupSpecifier;
			import flash.net.NetConnection;
			import flash.net.NetStream;

 			import flash.events.MouseEvent;
			import flash.events.Event;
			import flash.events.TimerEvent;
			import flash.events.AsyncErrorEvent;
			import flash.events.NetStatusEvent;

			import mx.events.ResizeEvent;

			import flash.utils.Timer;

			import flash.media.Camera;
			import flash.media.Microphone;

			private var netConnection:NetConnection;
			private var netStream:NetStream;
			
			private var camera:Camera;
			private var microphone:Microphone;
			private const SERVER:String = "rtmfp://108.59.252.39/2ad53ba05ab0437da544-8adb73046434";

			protected function initViewHandler(event:Event):void {
				setupCamera();

				// if camera exists and we have rights to read from it
				if ((camera != null) && (!camera.muted))
					setupMicrophone();
					setupNetConnectionAndStream();
			}

			private function cameraDebugTimerHandler(event:TimerEvent):void {
				var debug:String = "";
				debug += "activityLevel: " + camera.activityLevel + "\n";
				debug += "bandwidth: " + camera.bandwidth + "\n";
				debug += "currentFPS: " + camera.currentFPS + "\n";
				debug += "fps: " + camera.fps + "\n";
				debug += "keyFrameInterval: " + camera.keyFrameInterval + "\n";
				debug += "loopback: " + camera.loopback + "\n";
				//debug += "motionLevel: " + camera.motionLevel + "\n";
				//debug += "motionTimeout: " + camera.motionTimeout + "\n";
				debug += "quality: " + camera.quality + "\n";
				parentApplication.debugCamera = debug;
			}

			private function setupMicrophone():void {
				microphone = Microphone.getEnhancedMicrophone();
			}

			private function setupCamera():void {
				// log set camera
				parentApplication.log("Wybrana kamera: " +
					parentApplication.cameraOptions.getItemAt(
						parentApplication.settings.get("cameraIndex", 0)
					)
				);

				// get proper camera
				camera = Camera.getCamera(
					new String(
						parentApplication.settings.get("cameraIndex", 0)
					)
				);

				// does camera really exists?
				if (camera != null) {
					// do we have rights for capturing from camera?
					if (!camera.muted) {
						// prepare camera
						cameraDisplay.camera = camera;
						setCameraMode();

						// add camera debug
						//var cameraDebugTimer:Timer = new Timer(1000); 
						//cameraDebugTimer.addEventListener(TimerEvent.TIMER, cameraDebugTimerHandler);
						//cameraDebugTimer.start();
					}
					else
						parentApplication.log("User doesn't allow application to read data from camera!");
				} else
					parentApplication.log("Camera doesn't exists or it is used by other application...");
			}

			private function setCameraMode():void {
				// get currentMode
				var currentMode:Object = parentApplication.qualityOptions.getItemAt(parentApplication.settings.get("qualityIndex", 2));

				// do some logging
				parentApplication.log("currentMode: " + currentMode.width + "x" + currentMode.height);

				// set the mode of camera!
				camera.setMode(
					currentMode.width,
					currentMode.height,
					30
				);
				
				// set quality of streaming
				// we indicate that FMS should adjust quality to available banwidth
				camera.setQuality(0, 90);
			}
			
			private function setupNetConnectionAndStream():void {
				netConnection = new NetConnection();
				netConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				netConnection.connect(SERVER);
			}
			
			private function netStatusHandler(event:NetStatusEvent):void{
				switch(event.info.code){
					case "NetConnection.Connect.Success":
						parentApplication.log("połączono z serwerem!");
						setupStream();
						break;
					default:
						parentApplication.log("kod połączenia: " + event.info.code);
				}
			}

			private function setupStream():void{
				var groupspec:GroupSpecifier = new GroupSpecifier("myGroup/multicastOne");
				groupspec.serverChannelEnabled = true;
				groupspec.multicastEnabled = true;

				netStream = new NetStream(netConnection, groupspec.groupspecWithAuthorizations());
				netStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				netStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				function asyncErrorHandler(event:AsyncErrorEvent):void {
					// ignore asyncErrors
				}

				// audio
				netStream.audioReliable = true;
				netStream.attachAudio(microphone);
				// video
				netStream.videoReliable = false;
				netStream.attachCamera(camera);

				// publish
				netStream.publish("multicast");
			}

			private function setCameraDisplayDimensions():void {
				cameraDisplay.width = this.width;
				cameraDisplay.height = this.height;
			}

			protected function resizeViewHandler(event:ResizeEvent):void {
				if (camera != null) {
					playPauseButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
					setCameraDisplayDimensions();
					setupCamera();
					playPauseButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
				} else {
					setCameraDisplayDimensions();
				}
			}

			protected function togglePauseButtonClickHandler(event:MouseEvent):void {
				if (netStream != null)
					netStream.togglePause();
			}

			protected function stopButtonClickHandler(event:MouseEvent):void {
				cameraDisplay.camera = null;
				netStream.attachCamera(null);
				navigator.popView();
			}
			
			protected function plusButtonClickHandler(event:MouseEvent):void {
				var currentQualityIndex:int = parentApplication.settings.get("qualityIndex", 2);
				if (currentQualityIndex < parentApplication.qualityOptions.length-1) {
					parentApplication.settings.set("qualityIndex", currentQualityIndex + 1);
					setCameraMode();
				}
			}

			protected function minusButtonClickHandler(event:MouseEvent):void {
				var currentQualityIndex:int = parentApplication.settings.get("qualityIndex", 2);
				if (currentQualityIndex > 0) {
					parentApplication.settings.set("qualityIndex", currentQualityIndex - 1);
					setCameraMode();
				}
			}
		]]>
    </fx:Script>
	
	<s:navigationContent>
		<s:Button icon="@Embed(source='../../img/icons/Player Stop.png')"
			click="stopButtonClickHandler(event);" />
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button icon="@Embed(source='../../img/icons/Plus.png')"
			click="plusButtonClickHandler(event);" />
		<s:Button icon="@Embed(source='../../img/icons/Minus.png')"
			click="minusButtonClickHandler(event);" />
		<s:Button icon="@Embed(source='../../img/icons/Player Pause.png')" id="playPauseButton"
			click="togglePauseButtonClickHandler(event);" />
	</s:actionContent>
	
	<s:VGroup verticalAlign="middle" height="100%" width="100%">
		<s:HGroup horizontalAlign="center" width="100%">
			<mc:CameraDisplay id="cameraDisplay" />
		</s:HGroup>
	</s:VGroup>
</s:View>