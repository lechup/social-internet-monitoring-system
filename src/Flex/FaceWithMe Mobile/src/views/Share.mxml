<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
        xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:mc="com.facewithme.components.*" 

		title="Podziel siÄ™"
		width="100%"
		height="100%"
		styleName="bgBlack"

		resize="resizeHandler(event);"
		backKeyPressed="backKeyPressedHandler(event);"
		>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
        <![CDATA[
			import com.facewithme.components.CameraDisplay;
			import flash.events.AsyncErrorEvent;
			import flash.events.Event;
			import flash.events.KeyboardEvent;
			import flash.events.MouseEvent;
			import flash.events.NetStatusEvent;
			import flash.events.TimerEvent;
			import flash.media.Camera;
			import flash.media.Microphone;
			import flash.net.GroupSpecifier;
			import flash.net.NetConnection;
			import flash.net.NetStream;
			import flash.net.Responder;
			import flash.utils.Timer;
			import mx.effects.easing.Back;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import spark.components.ViewNavigator;
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;

			private function detachCamera():void {
				parentApplication.log("detachCamera");
				parentApplication.camera = null;
				parentApplication.netStream.attachCamera(null);
			}

			private function detachMicrophone():void {
				parentApplication.log("detachMicrophone");
				parentApplication.microphone = null;
				parentApplication.netStream.attachAudio(null);
			}

			private function setCameraDisplayDimensions():void {
				cameraDisplay.width = this.width;
				cameraDisplay.height = this.height;
			}

			private function resizeHandler(event:ResizeEvent):void {
				parentApplication.setCameraMode();
				setCameraDisplayDimensions();
				cameraDisplay.camera = parentApplication.camera;
			}

			private function stopBroadcasting(navigator:ViewNavigator = null):void {
				// stop capturing video and audio
				detachCamera();
				detachMicrophone();

				// send info to AMF, remove netstream and close connection
				parentApplication.stopBroadcasting();
				
				// move to first view
				if (this.navigator != null)
					this.navigator.popToFirstView();
				else if(navigator != null)
					navigator.popToFirstView();
			}
			
			private function stopButtonClickHandler(event:MouseEvent):void {
				stopBroadcasting();
			}

			private function plusButtonClickHandler(event:MouseEvent):void {
				var currentQualityIndex:int = parentApplication.settings.get("qualityIndex", 2);
				if (currentQualityIndex < parentApplication.settingsConst.qualityOptions.length - 1) {
					parentApplication.settings.set("qualityIndex", currentQualityIndex + 1);
					parentApplication.setCameraMode();
				}
			}

			private function minusButtonClickHandler(event:MouseEvent):void {
				var currentQualityIndex:int = parentApplication.settings.get("qualityIndex", 2);
				if (currentQualityIndex > 0) {
					parentApplication.settings.set("qualityIndex", currentQualityIndex - 1);
					parentApplication.setCameraMode();
				}
			}

			private function backKeyPressedHandler(event:FlexEvent):void {
				// stop broadcasting
				stopBroadcasting();
				
				// do not go back second time
				// cancel default event bahaviour
				event.preventDefault();
			}
		]]>
    </fx:Script>
	
	<s:navigationContent>
		<s:Button icon="@Embed(source='../../img/icons/Player Stop.png')"
			click="stopButtonClickHandler(event);" />
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button icon="@Embed(source='../../img/icons/Plus.png')"
			click="plusButtonClickHandler(event);" />
		<s:Button icon="@Embed(source='../../img/icons/Minus.png')"
			click="minusButtonClickHandler(event);" />
	</s:actionContent>
	
	<s:VGroup verticalAlign="middle" height="100%" width="100%">
		<s:HGroup horizontalAlign="center" width="100%">
			<mc:CameraDisplay id="cameraDisplay" />
		</s:HGroup>
	</s:VGroup>
</s:View>