<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		width="100%" height="100%"
		creationComplete="init()"
		>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[	
			import flash.events.ContextMenuEvent;
			import flash.events.Event;
			import flash.events.NetStatusEvent;
			import flash.media.Video;
			import flash.net.GroupSpecifier;
			import flash.net.NetConnection;
			import flash.net.NetStream;
			import flash.ui.ContextMenuItem;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.effects.effectClasses.ZoomInstance;
			import spark.components.Group;
			import flash.events.Event;
			import flash.media.Video;
			import mx.events.ResizeEvent;

		// zmienna do przechowywania tekstu wyświetlanego w menu DEBUG
			[Bindable]
			private var debugText:String = "";
		//
		
		// obiekt ustawień
			private var settings:Object = {
				'amfgateway' : 'http://facewithme.com/amf/',
				'debug' : true,
				'uuid' : 'e50fd431-1ad1-488a-a9dd-376c6ebc64a3'
			};
		//
		
		// zmienne potrzebne do nawiązania połączenia i wyświetlenia video
			private var netConnection:NetConnection;
			private var amfgateway:NetConnection;
			private var netStream:NetStream;
			private var entry:Object;
			private var video:Video;
		//

		// funkcja do logowania zdarzeń na zakładce DEBUG
			public function log(string:String):void {
				if (settings.debug) {
					debugText = debugText + string + "\n";
					trace(string);
				}
			}
		//
		
		// inicjalizacja aplikacji
			public function init():void {
			// menu kontekstowe (pod prawym przyciskiem myszy)
				// usuń domyślne wpisy
				contextMenu.hideBuiltInItems();
				// dodaj wpis menu kontekstowym
				var customItem:ContextMenuItem = new ContextMenuItem("Debug FaceWithMe Browser Receiver...");
				contextMenu.customItems.push(customItem);
				customItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, debugViewToggleHandler);
			//
			
			// pobierz parametry z flashVars (zmienne przekazywane z HTML)
			// i nadpisz domyślne wartości adresu amfgateway i uuid
				var params:Object = FlexGlobals.topLevelApplication.parameters;
				if (params.hasOwnProperty('amfgateway')) {
					settings['amfgateway'] = params.amfgateway;
				}
				if (params.hasOwnProperty('uuid')) {
					settings['uuid'] = params.uuid;
				}
			//

			// ustaw połączenie z bramą AMF
				setupAmfGateway();
			//
			}
			
			// funkcja wykonywana po naciśnięciu "Debug FaceWithMe Browser Receiver..."
			// w menu kontekstowym
			private function debugViewToggleHandler(event:ContextMenuEvent) : void {
				Alert.show(debugText, "Debug information:");
			}

			// funckja ustawiająca połączenie z bramą AMF
			private function setupAmfGateway():void {
				log("setupAmfGateway");

				if (amfgateway == null)
					amfgateway = new NetConnection();
				amfgateway.connect(settings.amfgateway);
				startReceivingAmfGateway();
			}

			// rozpocznij pobieranie streamu video
			private function startReceivingAmfGateway():void {
				if (settings.uuid != null) {
					// pobierz wpis z AmfGateway przy pomocy uuid i
					// zdalnie wywołanej funkcji fwm.start_receiving
					amfgateway.call(
						"fwm.start_receiving",
						new Responder(fwmStartReceiving, responderFault),
						settings.uuid
					);
				} else
					log("UUID parameter is not set!");
			}

			// obsłuż poprawne wywołanie zdalnej funkcji fwm.start_receiving
			private function fwmStartReceiving(result:Object):void {
				log("fmwStartReceiving");
	            if (result == null) {
					log("Response is BAD. Something is wrong...");
				} else {
					entry = result;
					// przejdź do konfigurowania streamu
					setupNetConnectionAndStream();
				}
	        }

			// obsłuż błąd wywołania zdalnej funkcji fwm.start_receiving
			private function responderFault(error:*):void {
	            log("Remote error:");
				// wypisz dokładny błąd który wystąpił zdalnie
	            for (var d:String in error) {
					log(error[d]);
	            }
			}

			// ustaw połączenie i stream
			private function setupNetConnectionAndStream():void {
				log("setupNetConnectionAndStream");
				if (netConnection == null) {
					netConnection = new NetConnection();
					netConnection.maxPeerConnections = 30;
					netConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				}
				netConnection.connect(entry.server);
			}

			// funkcja wywoływana po nawiązaniu połączenia z serwerem RTMFP
			private function netStatusHandler(event:NetStatusEvent):void{
				log("netStatusHandler");
				switch(event.info.code) {
					// po prawidłowym połączeniu ustaw stream
					case "NetConnection.Connect.Success":
						log("połączono z serwerem!");
						setupStream();
						break;
					// po podłączeniu do streamu wyświetl go i odtwórz
					case "NetStream.Connect.Success":
						playStream();
						break;
					default:
						log("kod połączenia: " + event.info.code);
				}
			}

			// funckja ustawiająca stream
			private function setupStream():void {
				log("setupStream");

				if (netStream == null) {
					var groupspec:GroupSpecifier = new GroupSpecifier(entry.uuid);
					groupspec.serverChannelEnabled = true;
					groupspec.multicastEnabled = true;

					netStream = new NetStream(netConnection, groupspec.groupspecWithAuthorizations());
					// sprawdzenie czy jest włączona obsługa sieci ze wspomaganiem równorzędnym
					// tutaj też wymuszamy jego pokazanie, NetGroup.Connect.Reject oznacza brak uprawnień
					netStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
					netStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
					function asyncErrorHandler(event:AsyncErrorEvent):void {
						// ignoruj błędy
					}
					
					// multicast
					netStream.multicastAvailabilitySendToAll = true;
					netStream.multicastPushNeighborLimit = 30;
					netStream.multicastRelayMarginDuration = 5;
					netStream.multicastWindowDuration = 30;

					netStream.videoReliable = false;
					netStream.audioReliable = true;
				}
			}

			// funkcja wykonywana po poprawnym połączeniu się ze streamem
			private function playStream():void {
				log("playStream");
				netStream.play("multicast");
				views.selectedChild = receive;
				setVideoDimensions();
			}

			// funkcja ustawiająca video oraz
			// dopasowująca jego wymiary do wymiarów animacji flash
			private function setVideoDimensions():void {
				log('setVideoDimensions');
				
				// ustaw obiekt video
				if (video == null) {
					video = new Video();
					video.attachNetStream(netStream);
					log('video.width: ' + video.width);
					log('video.height: ' + video.height);
				}

				// dopasuj szerokość / wysokość
				// do aktualnych rozmiarów aplikacji
				if (width > height)
					fitVideoToHeight(width, height);
				else
					fitVideoToWidth(width, height);

				// zaktualizuj wrapper video
				if (remoteVideoWrapper != null) {
					updateRemoteVideoWrapper();
					remoteVideoWrapper.removeChildAt(0);
					remoteVideoWrapper.addChildAt(video, 0);
				}
			}

			// zaktualizuj wymiary wrapper'a obiektu wideo
			// potrzebny do ustawienia środku
			private function updateRemoteVideoWrapper():void {
				if (remoteVideoWrapper != null) {
					remoteVideoWrapper.width = video.width;
					remoteVideoWrapper.height = video.height;
				}
			}

			// dopasuj do wysokości ekranu, zachowując proporcje wideo
			private function fitVideoToHeight(containerWidth:Number, containerHeight:Number):void {
				log('fitVideoToHeight');
				var newWidth:Number = containerHeight / video.height * video.width;
				video.width = newWidth;
				video.height = containerHeight;
				log('newWidth: ' + video.width);
				log('newHeight: ' + video.height);	
				if (newWidth > containerWidth) {
					fitVideoToWidth(containerWidth, containerHeight);
				}
			}

			// dopasuj do szerokości ekranu, zachowując proporcje wideo
			private function fitVideoToWidth(containerWidth:Number, containerHeight:Number):void {
				log('fitVideoToWidth');
				var newHeight:Number = containerWidth / video.width * video.height;
				video.width = containerWidth;
				video.height = newHeight;
				log('newWidth: ' + video.width);
				log('newHeight: ' + video.height);
				if (newHeight > containerHeight) {
					fitVideoToHeight(containerWidth, containerHeight);
				}
			}

			// funkcja wykonywana przy zmianie rozmiaru okna aplikacji
			// np. w momencie rozszerzenia kontenera HTML w którym dołączamy plik SWF
			private function resizeHandler(event:ResizeEvent):void {
				if ((views != null) && (views.selectedChild == receive)) {
					log('resizeHandler');
					setVideoDimensions();
				}
			}
		]]>
	</fx:Script>
	
	<mx:ViewStack id="views"
		width="100%"
		height="100%">

		<mx:Canvas id="loader"
			width="100%"
			height="100%">

			<s:VGroup height="100%" width="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" verticalAlign="middle">
				<s:HGroup  width="100%" horizontalAlign="center">
					<mx:SWFLoader id="swf_loader" source="@Embed(source='../img/loader.swf')" scaleX="2" scaleY="2" />
				</s:HGroup>
			</s:VGroup>
		</mx:Canvas>

		<mx:Canvas id="receive"
		    width="100%"
		    height="100%"
			backgroundColor="#000000" resize="resizeHandler(event)">
			
			<s:VGroup width="100%" height="100%" verticalAlign="middle">
				<s:HGroup horizontalAlign="center" width="100%">
					<mx:VideoDisplay id="remoteVideoWrapper" />
				</s:HGroup>
			</s:VGroup>
		</mx:Canvas>
	</mx:ViewStack>
</s:Application>